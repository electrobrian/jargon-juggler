#!/usr/bin/env ruby

# frozen_string_literal: true

require "dotenv/load"
require "twitch/bot"
require_relative "../lib/teneggs"

module Teneggs
  class JoinHandler < Twitch::Bot::EventHandler
    def call
      client.send_message "READY."
    end

    def self.handled_events
      [:join]
    end
  end

  class SubscriptionHandler < Twitch::Bot::EventHandler
    def call
      client.send_message "Hi #{event.user}, thank you for your subscription"
    end

    def self.handled_events
      [:subscription]
    end
  end

  class TimeCommandHandler < Twitch::Bot::EventHandler
    def call
      if event.command_name?("time")
        client.send_message "Current time: #{Time.now.utc}"
      end
    end

    def self.handled_events
      [:user_message]
    end
  end
end

def logfile
  if ENV["BOT_LOGFILE"]
    File.new(ENV["BOT_LOGFILE"], "w")
  else
    STDOUT
  end
end

def loglevel
  (ENV["BOT_LOGLEVEL"] || "info").to_sym
end

def development_mode?
  ENV["BOT_MODE"] == "development"
end

adapter_class = if development_mode?
                  "Twitch::Bot::Adapter::Terminal"
                else
                  "Twitch::Bot::Adapter::Irc"
                end

config = Twitch::Bot::Config.new(
  settings: {
    botname: ENV["TWITCH_USERNAME"],
    irc: {
      nickname: ENV["TWITCH_USERNAME"],
      password: ENV["TWITCH_PASSWORD"],
    },
    adapter: adapter_class,
    log: {
      file: logfile,
      level: loglevel,
    },
  },
)

client = Twitch::Bot::Client.new(
  channel: ENV["TWITCH_CHANNEL"],
  config: config,
) do
  register_handler(Teneggs::JoinHandler)
  register_handler(Teneggs::SubscriptionHandler)
  register_handler(Teneggs::TimeCommandHandler)
  register_handler(Teneggs::PlanCommandHandler)
  register_handler(Teneggs::QuoteCommandHandler)
end

client.run
